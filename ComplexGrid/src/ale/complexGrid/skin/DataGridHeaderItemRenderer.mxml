<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" clipAndEnableScrolling="true" 
					contentBackgroundColor="0xEDF6FE" fontWeight="normal" color="0x030303"
					minWidth="21" minHeight="28">
	<fx:Metadata>
		 [Style(name="textVerticalAlign", inherit="yes", type="String", arrayType="left,middle,bottom",format="String")] 
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import spark.skins.spark.DefaultGridHeaderRenderer;
			
			/**
			 *  @private
			 */
			private function dispatchChangeEvent(type:String):void
			{
				if (hasEventListener(type))
					dispatchEvent(new Event(type));
			}    
			
			override public function prepare(hasBeenRecycled:Boolean):void 
			{
				lblData.text = column.headerText;
			}
			
			//----------------------------------
			//  maxDisplayedLines
			//----------------------------------
			
			private var _maxDisplayedLines:int = 1;
			
			[Bindable("maxDisplayedLinesChanged")]
			[Inspectable(minValue="-1")]
			
			/**
			 *  The value of this property is used to initialize the 
			 *  <code>maxDisplayedLines</code> property of this renderer's 
			 *  <code>labelDisplay</code> element.
			 * 
			 *  @copy spark.components.supportClasses.TextBase#maxDisplayedLines
			 * 
			 *  @default 1
			 * 
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4.5
			 */
			public function get maxDisplayedLines():int
			{
				return _maxDisplayedLines;
			}
			
			/**
			 *  @private
			 */
			public function set maxDisplayedLines(value:int):void
			{
				if (value == _maxDisplayedLines)
					return;
				
				_maxDisplayedLines = value;
				if (lblData)
					lblData.maxDisplayedLines = value;
				
				invalidateSize();
				invalidateDisplayList();
				
				dispatchChangeEvent("maxDisplayedLinesChanged");
			}
			
			/* private var _verticalAlign:String = "left";
			[Bindable]
			[Inspectable(arrayType="String", defaultValue="left", environment="left,middle,bottom")]
			public function get verticalAlign():String
			{
				return _verticalAlign;
			}
			public function set verticalAlign(value:String):void
			{
				_verticalAlign = value;
			} */
			
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xEDF6FE" />
		</s:fill>
	</s:Rect>
	<s:Label id="lblData" top="9" left="7" right="7" bottom="9" textAlign="left" textAlignLast="center" verticalCenter="0" verticalAlign="{getStyle('textVerticalAlign')}"
			 fontWeight="normal" color="0x4C607A" 
			 lineBreak="toFit" maxDisplayedLines="1"/>
	
</s:GridItemRenderer>
